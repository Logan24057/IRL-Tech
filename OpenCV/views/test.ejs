<!DOCTYPE html>
<html>

<head>
    <!-- Set the title of the webpage -->
    <title>OpenCV Test</title>
    <!-- Load OpenCV.js asynchronously and call onOpenCvReady when it's loaded -->
    <script async src="/scripts/opencv.js" onload="onOpenCvReady()"></script>
</head>

<body>
    <!-- Display the number of circles detected -->
    <p id="circleCount"></p>

    <!-- Video input element for capturing video from the webcam -->
    <video id="videoInput" width="640" height="480" autoplay playsinline></video>
    <!-- Canvas for displaying the video with effects applied -->
    <canvas id="videoVFX" width="640" height="480"></canvas>
    <!-- Canvas for displaying the processed video frames -->
    <canvas id="videoOutput" width="640" height="480"></canvas>

    <script type="text/javascript">
        var src
        var dst
        var cap
        var background // Declare the background variable

        // Function called when OpenCV.js is ready
        function onOpenCvReady() {
            cv.onRuntimeInitialized = function () {
                // Get the video element
                let video = document.getElementById("videoInput");
                // Request access to the webcam
                navigator.mediaDevices.getUserMedia({ video: true, audio: false })
                    .then(function (stream) {
                        // Set the video source to the webcam stream
                        video.srcObject = stream;
                        video.play();
                        // Initialize the background variable as a new cv.Mat object
                        background = new cv.Mat(video.height, video.width, cv.CV_8UC4);
                        // Start processing the video  
                        processing(video);
                    })
                    .catch(function (err) {
                        // Log any errors that occur
                        console.log("An error occurred! " + err);
                    });
            }
        }

        // Function to apply transformations to a frame
        function applyTransformations(frame) {
            // Create new OpenCV.js Mat objects for grayscale, blur, and edge-detected frames
            var effects;

            // Convert the frame to grayscale
            let gray = new cv.Mat();
            cv.cvtColor(frame, gray, cv.COLOR_RGBA2GRAY);

            // Apply Gaussian blur to the grayscale frame
            let blur = new cv.Mat();
            cv.GaussianBlur(gray, blur, new cv.Size(1, 1), 0);

            // Apply Canny edge detection to the blurred frame
            let edges = new cv.Mat();
            cv.Canny(blur, edges, 1, 100, 5, false);


            // Apply threshold to further isolate circles
            let threshold = new cv.Mat();
            cv.threshold(edges, threshold, 150, 255, cv.THRESH_BINARY);

            // The "effects" variable holds the frame with all the effects applied
            // To add a new effect, apply it to "effects" and update "effects" with the result

            // For example, to apply a threshold effect, you could add these lines:
            effects = threshold; // set effects equals to the name of the most recent effect variable 

            // Delete the Mat objects that are no longer needed (aka all of them not equal to effects)
            gray.delete();
            blur.delete();
            edges.delete();

            // Return the frame with the effects applied
            return effects;
        }

        // Function to start processing the video
        function processing(video) {
            try {
                // Initialize OpenCV.js Mat objects for video frames
                src = new cv.Mat(video.height, video.width, cv.CV_8UC4); // Colored video frames
                dst = new cv.Mat(video.height, video.width, cv.CV_8UC1); // Grayscale video frames
                cap = new cv.VideoCapture(video); // Video capture object

                // Start the video processing loop
                setTimeout(processVideo, 0);
            } catch (error) {
                console.error('An error occurred in processing:', error);
            }
        }

        function processVideo() {
            // Initialize the number of face up and energy to 0
            let numbFaceUp = 0;
            let numbEnergy = 0;

            // Read the source from the capture
            cap.read(src);

            // Copy the source to the destination
            src.copyTo(dst);

            // Apply transformations to the destination and store the result
            let transformedFrame = applyTransformations(dst);

            // Initialize a new matrix for circles
            let circles = new cv.Mat();

            // Detect circles in the image using the Hough transform
            cv.HoughCircles(transformedFrame, circles, cv.HOUGH_GRADIENT, 1, 50, 1, 20, 30, 36);

            // Get the total number of detected circles
            let totalCircles = circles.cols;

            // Loop through each detected circle
            for (let i = 0; i < circles.cols; ++i) {
                // Get the x, y coordinates and radius of the circle
                let [x, y, radius] = circles.data32F.slice(i * 3, i * 3 + 3);

                // Create a new point with the x, y coordinates
                let center = new cv.Point(x, y);

                // Define the region of interest (ROI) around the circle
                // Calculate the x-coordinate of the region of interest (ROI)
                // Ensure it's not less than 0
                let roiX = Math.max(0, x - radius);

                // Calculate the y-coordinate of the ROI
                // Ensure it's not less than 0
                let roiY = Math.max(0, y - radius);

                // Calculate the width of the ROI
                // Ensure it's not greater than the width of the source image
                let roiWidth = Math.min(src.cols - roiX, radius * 2);

                // Calculate the height of the ROI
                // Ensure it's not greater than the height of the source image
                let roiHeight = Math.min(src.rows - roiY, radius * 2);

                // Create a ROI using the mask on the source image
                let roi = src.roi(new cv.Rect(roiX, roiY, roiWidth, roiHeight));

                // Create a mask for the circle with the same size as the ROI
                let mask = new cv.Mat.zeros(roi.rows, roi.cols, cv.CV_8UC1);
                // Draw a filled circle on the mask
                cv.circle(mask, new cv.Point(radius, radius), radius, [255, 255, 255, 255], -1);

                // Apply the mask to the ROI
                let maskedRoi = new cv.Mat();
                roi.copyTo(maskedRoi, mask);

                // Apply edge detection on the masked ROI
                let edges = new cv.Mat();
                cv.Canny(maskedRoi, edges, 50, 100);

                // Count the number of edges detected
                let edgeCount = cv.countNonZero(edges);

                // Define a threshold for the minimum number of edges
                let minimumEdges = 415;

                // Set the color based on the edge count: green if above the threshold, red otherwise
                let color = (edgeCount > minimumEdges) ? [0, 255, 0, 255] : [255, 0, 0, 255];
                // Draw the circle on the destination image with the determined color
                cv.circle(dst, center, radius, color, 2);

                // Initialize energyCount

                // If the edge count is above the threshold, increment the face up count
                if (edgeCount > minimumEdges) {
                    numbFaceUp++;
                }

                // For testing purposes only, comment in full versions
                // If it's the first iteration, display the edge count on the image
                if (i === 0) {
                    // Initialize the text to be displayed, showing the edge count
                    let text = "Edges: " + edgeCount;

                    // Set the scale for the font
                    let fontScale = 1.0;

                    // Set the thickness for the outline of the text
                    let thickness = 3;

                    // Set the color for the outline of the text (in this case, black)
                    let color = [0, 0, 0, 255];

                    // Use OpenCV's putText function to draw the text on the image
                    // The text is placed at the point (x, y) with the specified font, scale, color, and thickness
                    // cv.LINE_AA is used for anti-aliasing, making the text smoother
                    cv.putText(dst, text, new cv.Point(x, y), cv.FONT_HERSHEY_SIMPLEX, fontScale, color, thickness, cv.LINE_AA);
                }
                // Delete the new Mats
                mask.delete();
                roi.delete();
                maskedRoi.delete();
                edges.delete();
            }

            // Update the UI with the number of total and face up circles detected
            // Get the HTML element with the id "circleCount" and set its innerText to display the number of circles detected, the number of face up circles, and the number of energy pogs
            document.getElementById("circleCount").innerText = "Number of circles detected: " + totalCircles + " Number face up: " + numbFaceUp + " Number of energy pogs: " + numbEnergy;

            // Display the transformedFrame image in the HTML element with the id "videoVFX"
            cv.imshow("videoVFX", transformedFrame);

            // Display the dst image in the HTML element with the id "videoOutput"
            cv.imshow("videoOutput", dst);

            // Delete the transformedFrame and circles objects to free up memory
            transformedFrame.delete();
            circles.delete();

            // Set the delay between video processing iterations to 250 milliseconds
            delay = 250

            // Call the processVideo function after the specified delay
            setTimeout(processVideo, delay);
        }
    </script>
</body>